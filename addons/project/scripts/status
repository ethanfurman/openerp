#!/usr/bin/env python

from __future__ import print_function

from antipathy import Path
from scription import *
from openerplib import get_connection, get_records, MissingRecord

import sys
sys.path.insert(0, '/usr/local/bin/evs')
from hg_tools import extract_hg
sys.path.pop(0)

config_file = Path('/etc/openerp/fnx.ini')

@Command(
        type=Spec('type of update', choices=['task', 'issue']),
        id=Spec('id of task/issue', type=int),
        status=Spec('new status', choices=['install', 'test']),
        )
def set(type, id, status):
    setup()
    # check that id exists
    types = get_types()
    # ensure_stages(types, type, id, required=('Needs installed', 'Testing'))
    try:
        get_records(models[type], ids=id)
    except MissingRecord:
        abort('record not found in %r' % models[type].model_name)
    models[type].write(id, {'stage_id': types[stages[status]].id})


@Command()
def status():
    hg = extract_hg()
    for k in hg.names:
        echo('  ', k, '-->', repr(hg[k]))
    abort('just testing...')


def ensure_stages(types, type, id, required):
    model = models[type]
    record = get_records(model, ids=id, fields=['id', 'project_id'])
    if record.project_id:
        # some tasks/issues are not assigned to a project
        project_record = get_records(project, ids=record.project_id[0], fields=['type_ids'])
        echo(project_record)
        needs_ids = []
        for req in required:
            type_id = types[req]
            if type_id not in project_record.type_ids:
                needs_ids.append((4, type_id))
        if needs_ids:
            project.write(project_record.id, {'type_ids': needs_ids})


def get_types():
    types = dict([
        (r.name, r)
        for r in get_records(project_task_type)
        ])
    if 'Needs installed' not in types:
        new_id = project_task_type.create({
                'name': 'Needs installed',
                'description': 'Code has been created, committed, and pushed to the server. Now needs to be installed on customer machine.',
                'sequence': 5,
                'case_default': True,
                'state': 'open',
                'fold': True,
                })
        types['Needs installed'] = new_id
    if 'Testing' not in types:
        new_id = project_task_type.create({
                'name': 'Testing',
                'description': 'With this method of completing the task, does it work?',
                'sequence': 6,
                'case_default': True,
                'state': 'open',
                'fold': False,
                })
        types['Testing'] = new_id
    return types

def setup():
    global conn, project, project_task, project_issue, project_task_type, models, stages
    config = OrmFile(config_file, section='openerp')
    conn = get_connection(hostname=config.host, database=config.db, login=config.user, password=config.pw)
    project = conn.get_model('project.project')
    project_task = conn.get_model('project.task')
    project_issue = conn.get_model('project.issue')
    project_task_type = conn.get_model('project.task.type')
    models = {
            'issue': project_issue,
            'task':  project_task,
            }
    stages = {
            'install': 'Needs installed',
            'test': 'Testing',
            }

Main()

#!/usr/local/sbin/suid-python --virtualenv
"""
Checks if OpenERP is still running.

If not, kill all processes attempting to communicate with OpenERP (except this
one), then restart OpenERP.

Test 1: check that heartbeat file is less than three minutes old.
Test 2: check that a connection takes less than 60 seconds.

Issue an alert after each failed test.

TODO:
> examine system during a failure to see what information is available as
> to which processes to kill.

Issue an all-clear once OpenERP is up and running again.
"""
from __future__ import print_function

from scription import *
from antipathy import Path
from datetime import timedelta
from dbf import DateTime
from fnx_script_support import Notify, time_stamp, time2seconds
from openerplib import get_connection, AttrDict
import os
import socket
import time

CONFIG = OrmFile('%s/config/fnx.ini' % os.environ['VIRTUAL_ENV'], section='openerp')
CRON_BEAT = Path('/home/openerp/sandbox/openerp/var/cron_updates')
CUT_OFF = timedelta(seconds=7*60+30)
NOW = DateTime.now()
PAUSE_SERVER = Path('/home/openerp/sandbox/openerp/var/pause_server')


def connect():
    OE = AttrDict()
    OE.conn = get_connection(hostname=CONFIG.host, database=CONFIG.db, login=CONFIG.user, password=CONFIG.pw)
    return OE

@Command(
        pause=Spec('amount of time to stop checking for life', OPTION),
        )
def server(pause):
    """
    simple heart-beat test by attempting to connect to OpenERP
    """
    if pause is not None:
        pause = time2seconds(pause, negative=False)
        print('pause: %d seconds' % pause)
        if pause == 0:
            # remove file if it exists
            print('removing file')
            if PAUSE_SERVER.exists():
                PAUSE_SERVER.unlink()
        else:
            # create file and exit
            print('creating file')
            future = time_stamp(NOW.replace(delta_second=pause))
            PAUSE_SERVER.touch((future, future)) 
        return
    elif PAUSE_SERVER.exists():
        # have we passed the pause file's time?
        last_modified = DateTime.fromtimestamp(PAUSE_SERVER.stat().st_mtime)
        print('now: %s' % NOW)
        print('file: %s' % last_modified)
        if NOW < last_modified:
            print('still paused')
            return
        else:
            print('removing file')
            PAUSE_SERVER.unlink()
    #
    # check for signs of life
    restart_at = NOW.replace(delta_minute=7)
    print('connecting...', end=' ')
    first_time = True
    while 'waiting for signs of life':
        try:
            connect()
            print('success!')
            break
        except socket.error as exc:
            if exc.errno == 111:
                if first_time:
                    print('\n  OpenERP is not running...')
                    first_time = False
                else:
                    print()
                if DateTime.now() < restart_at:
                    print('    waiting a bit...', end=' ')
                    time.sleep(61)
                    continue
                else:
                    print('\n    restarting.')
                    with user_ids(0, 0):
                        os.system('/etc/init.d/openerp start')
                    break
            else:
                # unknown error
                raise

@Command()
def emit_cron_heartbeat():
    """
    update CRON_BEAT file with current time stamp; should be run from OE's scheduler
    """
    CRON_BEAT.touch()


@Command()
def cron():
    """
    Determine if the OE scheduler is still running.
    """
    errors = []
    if not CRON_BEAT.exists():
        errors.append('OpenERP cron heartbeat file %s is missing')
    else:
        last_update = DateTime.fromtimestamp(CRON_BEAT.stat().st_mtime)
        if DateTime.now() - last_update > CUT_OFF:
            errors.append('OpenERP scheduler is no longer functioning; please restart OpenERP')
    notify = Notify('check_openerp_cron')
    notify(errors)


Main()
